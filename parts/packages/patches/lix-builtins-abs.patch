diff --git c/lix/libexpr/builtins/abs.md i/lix/libexpr/builtins/abs.md
new file mode 100644
index 000000000..6c8ab27a2
--- /dev/null
+++ i/lix/libexpr/builtins/abs.md
@@ -0,0 +1,5 @@
+---
+name: abs
+args: [e]
+---
+Return the absolute value of the number *e*.
diff --git c/lix/libexpr/meson.build i/lix/libexpr/meson.build
index dcbc12e7d..628dda384 100644
--- c/lix/libexpr/meson.build
+++ i/lix/libexpr/meson.build
@@ -46,6 +46,7 @@ libexpr_settings_header = custom_target(
 
 builtin_definitions = files(
   'builtins/abort.md',
+  'builtins/abs.md',
   'builtins/add.md',
   'builtins/addDrvOutputDependencies.md',
   'builtins/all.md',
diff --git c/lix/libexpr/primops.cc i/lix/libexpr/primops.cc
index 7b9ea06cc..e8cfd4bd2 100644
--- c/lix/libexpr/primops.cc
+++ i/lix/libexpr/primops.cc
@@ -2452,6 +2452,16 @@ static void prim_lessThan(EvalState & state, const PosIdx pos, Value * * args, V
     v.mkBool(comp(args[0], args[1]));
 }
 
+static void prim_abs(EvalState & state, const PosIdx pos, Value * * args, Value & v)
+{
+    state.forceValue(*args[0], pos);
+    if (args[0]->type() == nFloat)
+        v.mkFloat(std::abs(state.forceFloat(*args[0], pos, "while evaluating the argument passed to builtins.abs")));
+    else {
+        v.mkInt(std::abs(state.forceInt(*args[0], pos, "while evaluating the argument passed to builtins.abs").value));
+    }
+}
+
 
 /*************************************************************
  * String manipulation
